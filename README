	 	 Application Architecture

src
	├─ Core     (Core code related to the application resides here)
                      ├─ activity (Base Activity resides here)
                      ├─ fragment (Base Fragment resides here)
                      ├─ viewmodel (Base ViewModel resides here)
				├─ di (All the API related to dependency injection)
                                ├─ AppModule (Application level module and provider for App level data)
                                ├─ NetworkModule (Networking related module and provides all API for N/W)
                                ├─ RepositoryModule (Repository design Pattern related code)
				├─ network (Base class used for managing network connections)
				├─ repository
                      ├─ model (Beans class for Response Object)
                      ├─ repository Design pattern used to separate the ViewModel and API service call

	├─ ui
                     ├─ activity :Code related to your parent activities
                     └─ dialog   : Loading dialog related class
                     └─ fragments:Code related to your parent fragment

                    ├─ util
                       ├─ AppConstant (Store constant files for entire App)
                       ├─ AppUtils (Utility class)
                       ├─ CaseInsensitiveMap (Customized LinkedHashMap used to handle insensitive key case)
                       ├─ DataState (Event Stream class for observer)
                       ├─ EntityMapper Mapper convert the response to Model

				├─ viewmodel
                       ├─ operationhelper (Operation Helper can used to perform common task as per requirement)

Assignment Output 

1. Truecaller10thCharacterRequest:
O/p: Successfully hit the service and returned the " " space as 10th character.

2. TruecallerEvery10thCharacterRequest:
O/p: Successfully Returned a String of every 10th character (i.e. 10th, 20th, 30th, etc.) and display the array on the screen.

3. TruecallerWordCounterRequest:
O/p: Successfully returned the linkedHaspMap string with index as words and its count in response as value of the html response callback.


Tech Stack

[Kotlin-DSL, LiveData, DataBinding, OkHttp3, Hilt, Retrofit2, Navigation Architecture , MVVM (Model-View-ViewModel) + MVI (ViewState-State Reducer) , Jetpack component

Other Best Practices Used ::

Followed Google Coding Guidelines and Clean Architecture
Used MVI design pattern with Repository , This separation of concerns allows the data layer to be used on multiple screens, share information between different parts of the app, and reproduce business logic outside of the UI for unit testing.
Used Hilt ,Navigation Architecture, Coroutine etc
Clean separation b/w UI layer, data layer and business layer using advance dependency injections
All network related calls has been decoupled from modules and  made through API service Class. Its being used for code extensibility.
(Network connection can be made here though Retrofit or OKHttp3)
Used Android Jetpack component to match with google coding standard
Easier to write unit test case
Handled Error scenario partially due to limited time slot.

#REF
for "data" package->https://github.com/android/architecture-samples/tree/dev-todo-mvvm-live/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/data
